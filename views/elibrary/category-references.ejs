<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>References - eLibrary</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">
  <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
  <link rel="stylesheet" href="/assets2/css/elibrary.css">
  <style>
    :root {
      --primary: #667eea;
      --accent: #6ee7b7;
      --light-bg: #f8fafd;
      --header-grad: linear-gradient(90deg, #667eea 0%, #6ee7b7 100%);
      --card-bg: #fff;
      --text: #25324b;
      --muted: #59697b;
      --border: #ebedf7;
      --shadow: 0 3px 24px 0 rgba(80,112,225,0.06);
    }
    body {
      font-family: 'Inter', sans-serif;
      background: var(--light-bg);
      margin: 0;
      color: var(--text);
    }

    /* Navbar */
    .navbar {
      position: sticky;
      top: 0;
      z-index: 25;
      background: #fff;
      box-shadow: 0 2px 12px 0 rgba(80,112,225,0.025);
      border-bottom: 1.5px solid var(--border);
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: .7rem 2.4rem .7rem 2rem;
    }
    .navbar-brand {
      font-weight: 700;
      font-size: 1.23rem;
      color: var(--primary);
      letter-spacing: -1px;
      display: flex;
      align-items: center;
      gap: 7px;
      text-decoration: none;
    }
    .navbar-brand i {
      color: var(--accent);
      width: 26px;
      height: 26px;
    }
    .navbar-links {
      display: flex;
      gap: 1.6rem;
      align-items: center;
    }
    .navbar-link {
      color: var(--text);
      font-weight: 500;
      text-decoration: none;
      padding: .48em 1em;
      border-radius: 6px;
      font-size: 1rem;
      transition: background .13s, color .11s;
      display: flex;
      align-items: center;
      gap: 7px;
    }
    .navbar-link:hover,
    .navbar-link.active {
      background: #e6efff;
      color: var(--primary);
    }
    .navbar-cta {
      background: linear-gradient(90deg, #667eea 0%, #6ee7b7 100%);
      border: none;
      border-radius: .95em;
      color: #fff;
      font-weight: 600;
      cursor: pointer;
      padding: .5em 1.1em;
      font-size: 1rem;
      box-shadow: 0 2px 8px rgba(94,107,195,0.1);
      display: flex;
      align-items: center;
      gap: 8px;
      text-decoration: none;
      transition: background .14s;
    }
    .navbar-cta:hover {
      background: linear-gradient(90deg, #4959ba 0%, #39cdae 100%);
    }
    .navbar-toggle {
      display: none;
      background: none;
      border: none;
      margin-left: 1em;
      cursor: pointer;
      padding: .3em;
      border-radius: 8px;
    }
    .navbar-toggle .lucide {
      width: 2em; height: 2em;
      color: var(--primary);
    }
    @media (max-width:900px) {
      .navbar { padding: .7rem 1.1rem .7rem 1rem; }
      .navbar-links { gap: .8rem; }
    }
    @media (max-width: 700px) {
      .navbar-links {
        position: fixed;
        left: 0; right: 0;
        top: 4.1rem;
        background: #fff;
        flex-direction: column;
        align-items: stretch;
        transform: translateY(-112%);
        transition: transform .22s cubic-bezier(.43,.15,.27,1.11);
        gap: 0;
        box-shadow: 0 8px 34px 0 rgba(70,90,190,0.07);
        border-bottom-left-radius: 1.2em;
        border-bottom-right-radius: 1.2em;
        z-index: 99;
      }
      .navbar-links.active { transform: translateY(0); }
      .navbar-link,
      .navbar-cta {
        width: 100%;
        border-radius: 0;
        padding: 1em 1.6em;
      }
      .navbar-link {
        border-bottom: 1px solid #f2f5fb;
        font-size: 1.07rem;
      }
      .navbar-cta {
        border-bottom-left-radius: 1em;
        border-bottom-right-radius: 1em;
        margin-bottom: .4em;
      }
      .navbar-toggle { display: block; }
    }
    .navbar-overlay {
      display: none;
      position: fixed;
      top: 0; left: 0; right: 0; bottom: 0;
      background: rgba(80,112,225, 0.11);
      z-index: 90;
      transition: opacity .24s;
    }
    .navbar-overlay.active {
      display: block;
      opacity: 1;
    }

    /* Header */
    .elibrary-header {
      background: var(--header-grad);
      padding: 2rem 0 2rem 0;
      color: #fff;
      text-align: center;
      border-bottom-left-radius: 2rem;
      border-bottom-right-radius: 2rem;
      margin: 0 0 1.4rem 0;
      box-shadow: var(--shadow);
      position: relative;
    }
    .elibrary-header h1 {
      margin-top: 0;
      margin-bottom: .65em;
      font-size: 2.45rem;
      font-weight: 700;
      letter-spacing: -2px;
      line-height: 1.15em;
    }

    /* Search Form */
    .search-form {
      display: flex;
      justify-content: center;
      gap: 0;
      max-width: 410px;
      margin: 0 auto;
      background: #fff;
      border-radius: 999px;
      padding: .13em;
      box-shadow: 0 2px 18px rgba(57,76,159,0.08);
    }
    .search-form input[type="text"] {
      flex: 1;
      border: none;
      padding: .67em 1.1em;
      font-size: 1.07rem;
      border-radius: 999px 0 0 999px;
      outline: none;
      font-family: inherit;
      background: none;
      min-width: 55px;
    }
    .search-form button {
      background: var(--primary);
      color: #fff;
      border: none;
      border-radius: 0 999px 999px 0;
      font-size: 1.07rem;
      padding: .67em 1.6em;
      font-weight: 600;
      cursor: pointer;
      transition: background .17s;
    }
    .search-form button:hover {
      background: #4959ba;
    }

    /* Main Content */
    .elibrary-main {
      max-width: 1050px;
      margin: 2.2rem auto 0 auto;
      background: var(--card-bg);
      border-radius: 2rem;
      box-shadow: var(--shadow);
      padding: 2.3rem 2rem 2.7rem 2rem;
    }

    /* Categories Section */
    .categories h2 {
      margin: 0 0 1.1em 0;
      font-weight: 600;
      font-size: 1.31rem;
      color: var(--primary);
      letter-spacing: -.5px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .category-list {
      display: flex;
      gap: 1.5rem;
      flex-wrap: wrap;
      margin-bottom: 2.2rem;
    }
    .category-card {
      flex: 1 1 210px;
      max-width: 260px;
      min-width: 190px;
      background: #fcfdff;
      border-radius: 1.25rem;
      text-decoration: none;
      color: var(--text);
      padding: 1.6em 1.1em 1.2em 1.25em;
      box-shadow: 0 2px 16px 0 rgba(93,117,231,0.04);
      transition: box-shadow .15s, transform .12s;
      border: 1.5px solid transparent;
      cursor: pointer;
      position: relative;
      display: flex;
      flex-direction: column;
      gap: .47em;
    }
    .category-card:hover, .category-card:focus {
      box-shadow: 0 5px 22px 0 rgba(57,76,199,0.10);
      border: 1.5px solid var(--primary);
      color: var(--primary);
      transform: translateY(-3px) scale(1.012);
      outline: none;
    }
    .category-card h3 {
      margin: 0;
      font-size: 1.13rem;
      font-weight: 600;
      letter-spacing: -.5px;
    }
    .category-card p {
      margin: .30em 0 0 0;
      font-size: 1.01rem;
      opacity: .92;
      color: var(--muted);
      font-weight: 400;
    }

    /* Popular Files */
    .popular-files h2 {
      margin: 1em 0 .9em 0;
      color: var(--primary);
      font-size: 1.22rem;
      font-weight: 600;
      letter-spacing: -.3px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .file-list {
      display: flex;
      flex-wrap: wrap;
      gap: 1.3rem;
      margin-bottom: -1rem;
    }
    .file-card {
      background: #fafcff;
      border-radius: 1.15rem;
      flex: 1 1 225px;
      max-width: 256px;
      min-width: 170px;
      padding: 1.12em 1.15em 1.12em 1.17em;
      box-shadow: 0 1.5px 12px rgba(98,128,245,0.06);
      display: flex;
      flex-direction: column;
      gap: .271em;
      border: 1.5px solid #eef2fb;
      position: relative;
    }
    .file-card h3 {
      margin: 0 0 .34em 0;
      font-size: 1.085rem;
      font-weight: 600;
      color: #22336b;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    .file-card p {
      margin: 0;
      color: var(--muted);
      font-size: .99rem;
      line-height: 1.45em;
      max-height: 2.95em;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    .file-card strong { color: #267ea3; }
    .file-card .btn {
      display: inline-block;
      margin-top: .7em;
      background: var(--primary);
      color: #fff;
      border: none;
      border-radius: 999px;
      font-size: .96rem;
      padding: .53em 1.23em;
      font-weight: 600;
      text-decoration: none;
      transition: background .15s;
    }
    .file-card .btn:hover {
      background: #4959ba;
    }

    /* Responsive layouts */
    @media (max-width: 1050px) {
      .elibrary-main { padding: 1.1rem .3rem 1.5rem .3rem; }
      .categories .category-list, .file-list { gap: .9rem; }
      .category-card, .file-card { min-width: 140px; }
    }
    @media (max-width: 700px) {
      .elibrary-header { border-radius: 0; }
      .elibrary-main { border-radius: 0; }
      .categories .category-list, .file-list { flex-direction: column; }
      .category-card, .file-card { max-width: none; width: 100%; }
      .navbar { border-radius: 0; }
    }

    .references-layout {
      display: flex;
      max-width: 1200px;
      margin: 0 auto;
      background: #fff;
      border-radius: 2rem;
      box-shadow: 0 3px 24px 0 rgba(80,112,225,0.08);
      min-height: 650px;
      padding: 1.6rem 1.4rem;
    }
    .references-sidebar {
      width: 270px;
      min-width: 170px;
      border-right: 1.5px solid #f1f4fb;
      padding: .4rem 0 .4rem .2rem;
      background: #f6fafe;
      border-radius: 1.2rem;
      margin-right: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 1.25rem;
      height: 100%;
    }
    .department-list,
    .occupation-list,
    .level-list {
      list-style: none;
      margin: 0;
      padding: 0;
      font-size: 1.02rem;
    }
    .department-list .sidebar-title,
    .occupation-list .sidebar-title,
    .level-list .sidebar-title {
      margin: 0 .4em .76em .4em;
      font-size: 1.07em;
      font-weight: 700;
      color: #4959ba;
      opacity: 0.85;
      letter-spacing: 0;
    }
    .sidebar-btn {
      width: 100%;
      text-align: left;
      padding: .76em 1.1em .76em 1.5em;
      border: none;
      background: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1.06em;
      color: #172449;
      font-weight: 500;
      margin-bottom: 2px;
      transition: background .09s, color .09s;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .sidebar-btn.active, .sidebar-btn:hover, .sidebar-btn:focus {
      background: #e7edff;
      color: #4964e0;
      outline: none;
    }
    .references-content {
      flex: 1;
      padding: .3rem 0 0 0;
      display: flex;
      flex-direction: column;
      gap: 1.1rem;
    }
    .refs-section-title {
      font-size: 1.25rem;
      color: #4973e1;
      font-weight: 600;
      margin: 0 0 0.4em 0;
      letter-spacing: -.7px;
      display: flex;
      gap:8px;
      align-items:center;
    }
    .references-list, .videos-list {
      list-style: none;
      padding: 0 .1em;
      margin: 0 0 0.4em 0;
      display: flex;
      flex-direction: column;
      gap: 1.07em;
    }
    .ref-file-card {
      display: flex;
      align-items: flex-start;
      background: #fafdff;
      box-shadow: 0 1.8px 12px rgba(98,128,245,0.06);
      border-radius: 1em;
      padding: 1.03em 1em;
      gap: 1em;
      transition: box-shadow .13s, border .13s;
      border: 1.3px solid #edf1fb;
    }
    .ref-file-card:hover {
      box-shadow: 0 6px 18px 0 rgba(89, 117, 234, 0.13);
      border: 1.3px solid #667eea;
    }
    .ref-file-info {
      flex:1;
      min-width: 0;
    }
    .ref-file-title {
      font-weight:600;
      font-size:1.05em;
      margin:0 0 .18em 0;
      color:#22336b;
      overflow-x:auto;
    }
    .ref-file-meta {
      color: #7481a9;
      font-size:.97em;
    }
    .view-btn {
      background: #667eea;
      color: #fff;
      border: none;
      border-radius: 2em;
      padding: .47em 1.22em;
      font-weight: 600;
      font-size:.97em;
      cursor: pointer;
      margin-left: .6em;
      margin-top: .15em;
      transition: background .13s;
      text-decoration: none;
      display:flex;
      align-items:center;
      gap:4px;
    }
    .view-btn:hover,.view-btn.active {
      background: #4959ba;
      color:#fff;
      text-decoration:underline;
    }
    .video-modal-backdrop {
      position:fixed;
      top:0;right:0;bottom:0;left:0;
      background:rgba(58,76,120,.12);
      z-index:9999;
      display:flex;
      align-items:center;
      justify-content:center;
      padding:1.5em;
    }
    .video-modal-content {
      background:#fff;
      padding:0;
      border-radius:1.4em;
      max-width:670px;
      box-shadow:0 8px 34px 0 rgba(70,90,190,0.10);
      position:relative;
      width:100%;
      overflow:hidden;
    }
    .video-modal-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding:.77em 1.4em .65em 1.2em;
      border-bottom:1px solid #f2f6ff;
      background:#f8fafd;
    }
    .video-modal-title {
      font-weight:600;
      font-size:1.1em;
      color:#2d3d70
    }
    .video-modal-close {
      border:none;
      background:transparent;
      color:#667eea;
      font-size:1.5em;
      cursor:pointer;
      margin-left:8px;
      line-height:1em;
    }
    .video-modal-body {
      padding:.8em 1.2em 1.2em 1.2em;
      display: flex;
      flex-direction: column;
      gap:.5em
    }
    .video-yt-frame {
      width: 100%;
      min-height:338px;
      border-radius: 1em;
      border: none;
      margin: 0 auto;
      background: #111;
      box-shadow: 0 2px 16px rgba(90,99,180,0.06);
    }
    @media (max-width:1050px){
      .references-layout {padding:.5rem 0.3rem;}
      .references-sidebar{
        min-width:120px;
        width:23vw;
        margin-right:1.07rem;}
    }
    @media (max-width:900px){
      .references-layout { flex-direction:column; padding:.2rem;}
      .references-sidebar { 
        flex-direction: row;
        border-radius:1.2em 1.2em 0 0;
        border-right: none;
        border-bottom: 1.5px solid #f1f4fb;
        margin-right:0;
        margin-bottom:1rem;
        width: 100%;
        min-width: 0;
        overflow-x:auto;
        gap:.7rem;
        padding:.1em .2em .8em .2em;
      }
      .references-content { padding:.6rem 0 0 0;}
    }
    @media (max-width:700px){
      .elibrary-header, .references-layout {border-radius:0;}
      .references-layout {min-height:410px;}
      .references-sidebar { border-radius:0; }
      .video-modal-content{ max-width:375px;}
      .video-yt-frame { min-height:189px; }
    }
  </style>
</head>
<body>
  <!-- Responsive Navbar -->
  <nav class="navbar" role="navigation" aria-label="Main Navigation">
    <a class="navbar-brand" href="/">
      <i class="lucide" data-lucide="book-open"></i>
    STVC  eLibrary
    </a>
    <button class="navbar-toggle" id="navbar-toggle" aria-label="Open Menu" aria-expanded="false">
      <i class="lucide" data-lucide="menu"></i>
    </button>
    <div class="navbar-links" id="navbar-links">
      <a class="navbar-link" href="/selamcdms/elibrary">
        <i class="lucide" data-lucide="home"></i>
        Home
      </a>
       <a class="navbar-link " href="/selamcdms/elibrary/category/study-materials">
        <i class="lucide" data-lucide="library"></i>
        Study Materials and Shared Files
      </a>
     
        <a class="navbar-link active" href="/selamcdms/elibrary/category/references">
        <i class="lucide" data-lucide="book"></i>
        References
      </a>
    
    </div>
    <div class="navbar-overlay" id="navbar-overlay" tabindex="-1"></div>
  </nav>

  <header class="elibrary-header">
    <h1>References</h1>
    <p>Select a department &rarr; occupation &rarr; level to view reference materials</p>
  </header>

  <main>
    <section class="references-layout">
      <aside class="references-sidebar" id="ref-sidebar">
        <!-- DEPARTMENTS (populated by JS) -->
      </aside>
      <section class="references-content" id="ref-content">
        <h2 class="refs-section-title"><i class="lucide" data-lucide="layers"></i> Select from sidebar</h2>
        <p>Please select a department, occupation, and level from the left to view available references.</p>
      </section>
    </section>
  </main>

  <!-- Video Modal -->
  <div id="video-modal" style="display:none;"></div>

  <script>
    // Example Sample Data - Replace with API call or backend in real use!
  const referenceData = <%- JSON.stringify(referenceData) %>;

  // now you can use referenceData as an array in JS
  console.log(referenceData); // Works! 
    // Utility to build sidebar recursively
    function renderSidebar() {
      const sidebar = document.getElementById('ref-sidebar');
      sidebar.innerHTML = '';
      const deptList = document.createElement('ul');
      deptList.className = 'department-list';
      deptList.innerHTML = `<li class="sidebar-title">Departments</li>`;
      referenceData.forEach((dept, dIdx) => {
        const deptItem = document.createElement('li');
        deptItem.innerHTML = `<button class="sidebar-btn" data-type="dept" data-idx="${dIdx}" tabindex="0"><i class="lucide" data-lucide="building"></i> ${dept.name}</button>`;
        deptList.appendChild(deptItem);

        // Add container for occupations in sidebar
        const occList = document.createElement('ul');
        occList.className = 'occupation-list';
        occList.style.display = 'none';
        occList.setAttribute('data-dept-idx', dIdx);
        // Occupations added dynamically
        deptItem.appendChild(occList);
      });
      sidebar.appendChild(deptList);

      // Occ and level containers are added dynamically on click
      lucide.createIcons();
    }

    // Handle sidebar clicks for expansion and content
    function sidebarBehavior() {
      const sidebar = document.getElementById('ref-sidebar');
      let selectedDept, selectedOcc, selectedLevel;

      sidebar.addEventListener('click', function(e) {
        const btn = e.target.closest('.sidebar-btn');
        if (!btn) return;
        const type = btn.dataset.type;

        // Remove all active classes
        sidebar.querySelectorAll('.sidebar-btn').forEach(b=>b.classList.remove('active'));
        btn.classList.add('active');
        
        if(type === 'dept') {
          // Expand or show corresponding occupations
          showOccupations(btn.dataset.idx);
        } else if(type === 'occ') {
          const dIdx = btn.dataset.deptIdx, oIdx = btn.dataset.occIdx;
          showLevels(dIdx, oIdx);
        } else if(type === 'level') {
          const dIdx = btn.dataset.deptIdx, oIdx = btn.dataset.occIdx, lIdx = btn.dataset.lvlIdx;
          showReferences(dIdx, oIdx, lIdx);
        }
      });

      // Handle expansion for keyboard navigation
      sidebar.addEventListener('keydown', function(e) {
        if(e.target.classList.contains('sidebar-btn') && (e.key==='Enter'||e.key===' ')) {
          e.preventDefault();
          e.target.click();
        }
      });

      // Helpers
      function showOccupations(deptIdx) {
        // Hide all occupation-lists
        sidebar.querySelectorAll('.occupation-list').forEach(ul=>ul.style.display='none');
        sidebar.querySelectorAll('.level-list').forEach(ul=>ul.remove());
        selectedDept = Number(deptIdx);
        selectedOcc = selectedLevel = undefined;
        // List occupations for selected dept
        const dept = referenceData[deptIdx];
        const occList = sidebar.querySelector('[data-dept-idx="'+deptIdx+'"]');
        occList.innerHTML = `<li class="sidebar-title">Occupations</li>`;
        dept.occupations.forEach((occ, occIdx) => {
          const li = document.createElement('li');
          li.innerHTML = `<button class="sidebar-btn" data-type="occ" data-dept-idx="${deptIdx}" data-occ-idx="${occIdx}">
            <i class="lucide" data-lucide="users"></i> ${occ.name}
          </button>`;
          occList.appendChild(li);
        });
        occList.style.display = '';
        lucide.createIcons();
        // Clear references content
        document.getElementById('ref-content').innerHTML = `<h2 class="refs-section-title"><i class="lucide" data-lucide="briefcase"></i> ${dept.name} Department</h2>
          <p>Select an occupation to see levels and their references.</p>`;
        lucide.createIcons();
      }

      function showLevels(deptIdx, occIdx) {
        // Remove prev level-list
        sidebar.querySelectorAll('.level-list').forEach(ul=>ul.remove());
        selectedDept = Number(deptIdx);
        selectedOcc = Number(occIdx);
        selectedLevel = undefined;
        const dept = referenceData[deptIdx];
        const occ = dept.occupations[occIdx];

        // Render levels after occupation button
        const occBtn = sidebar.querySelector(
          `.sidebar-btn[data-type="occ"][data-dept-idx="${deptIdx}"][data-occ-idx="${occIdx}"]`
        );
        let lvlsUl = document.createElement('ul');
        lvlsUl.className = 'level-list';
        lvlsUl.style.margin = '0 0 0 24px';
        lvlsUl.innerHTML = `<li class="sidebar-title">Levels</li>`;
        occ.levels.forEach((lvl, lvlIdx)=>{
          const li = document.createElement('li');
          li.innerHTML = `<button class="sidebar-btn" data-type="level" data-dept-idx="${deptIdx}" data-occ-idx="${occIdx}" data-lvl-idx="${lvlIdx}">
            <i class="lucide" data-lucide="bookmark"></i> ${lvl.name}
          </button>`;
          lvlsUl.appendChild(li);
        });
        occBtn.parentElement.appendChild(lvlsUl);
        lucide.createIcons();

        // Clear content for level
        document.getElementById('ref-content').innerHTML = `<h2 class="refs-section-title">
          <i class="lucide" data-lucide="user"></i> ${dept.name} - ${occ.name}
          </h2>
          <p>Select a level to view reference materials.</p>`;
        lucide.createIcons();
      }

      function showReferences(deptIdx, occIdx, lvlIdx) {
        selectedDept = Number(deptIdx);
        selectedOcc = Number(occIdx);
        selectedLevel = Number(lvlIdx);
        const dept = referenceData[deptIdx];
        const occ = dept.occupations[occIdx];
        const lvl = occ.levels[lvlIdx];

        let html = `<h2 class="refs-section-title"><i class="lucide" data-lucide="book-open"></i> ${dept.name} / ${occ.name} / ${lvl.name}</h2>`;

        if ((!lvl.references || lvl.references.length === 0)) {
          html += `<p>No references found for this level.</p>`;
        } else {
          // File references
          if (lvl.references.some(r=>r.type==='file')) {
            html += `<h3 class="refs-section-title"><i class="lucide" data-lucide="file"></i> Files</h3>
            <ul class="references-list">`;
            lvl.references.filter(ref=>ref.type==="file").forEach(ref => {
              html += `<li>
                <div class="ref-file-card">
                  <div class="ref-file-info">
                    <div class="ref-file-title"><i class="lucide" data-lucide="file-text"></i> ${ref.title}</div>
                    <div class="ref-file-meta">${ref.info ? ref.info : ''}</div>
                  </div>
                  <a class="view-btn" href="/selamcdms${ref.path}" target="_blank" rel="noopener">
                    <i class="lucide" data-lucide="download"></i> Download
                  </a>
                </div>
              </li>`;
            });
            html += `</ul>`;
          }
          // Video references
          if (lvl.references.some(r=>r.type==='video')) {
            html += `<h3 class="refs-section-title"><i class="lucide" data-lucide="video"></i> Videos</h3>
            <ul class="videos-list">`;
            lvl.references.filter(ref=>ref.type==="video").forEach((ref, idx) => {
              html += `<li>
                <div class="ref-file-card">
                  <div class="ref-file-info">
                    <div class="ref-file-title"><i class="lucide" data-lucide="youtube"></i> ${ref.title}</div>
                    <div class="ref-file-meta">${ref.info ? ref.info : ''}</div>
                  </div>
                  <button class="view-btn video-open-btn" data-video-title="${encodeURIComponent(ref.title)}"
                    data-video-id="${ref.videoId}">
                    <i class="lucide" data-lucide="play"></i> Play
                  </button>
                </div>
              </li>`;
            });
            html += `</ul>`;
          }
        }
        document.getElementById('ref-content').innerHTML = html;
        lucide.createIcons();
      }
    }

    // Video modal open/play
    function videoModalBehavior() {
      const refContent = document.getElementById('ref-content');
      const modal = document.getElementById('video-modal');
      refContent.addEventListener('click', function(e) {
        if (e.target.closest('.video-open-btn')) {
          const btn = e.target.closest('.video-open-btn');
          const ytId = btn.dataset.videoId;
          const title = decodeURIComponent(btn.dataset.videoTitle);
          modal.innerHTML = `
            <div class="video-modal-backdrop" tabindex="-1">
              <div class="video-modal-content">
                <div class="video-modal-header">
                  <span class="video-modal-title"><i class="lucide" data-lucide="youtube"></i> ${title}</span>
                  <button class="video-modal-close" aria-label="Close" tabindex="0">&times;</button>
                </div>
                <div class="video-modal-body">
                  <iframe class="video-yt-frame"
                    src="https://www.youtube.com/embed/${ytId}?rel=0&autoplay=1"
                    frameborder="0" allowfullscreen allow="autoplay; encrypted-media">
                  </iframe>
                </div>
              </div>
            </div>
          `;
          modal.style.display = "block";
          // Accessibility: focus modal close
          setTimeout(() => {
            const closeBtn = modal.querySelector('.video-modal-close');
            if(closeBtn) closeBtn.focus();
          }, 250);
          lucide.createIcons();
        }
      });
      // Click backdrop or close to remove modal
      modal.addEventListener('click', function(e){
        if(e.target.classList.contains('video-modal-backdrop') 
            || e.target.classList.contains('video-modal-close')) {
          modal.style.display = "none";
          modal.innerHTML = "";
        }
      });
      // Esc closes video modal
      window.addEventListener('keydown', function(e){
        if(e.key === "Escape" && modal.style.display!=="none") {
          modal.style.display = "none";
          modal.innerHTML = "";
        }
      });
    }

    // Navbar Responsive Menu reuse
    window.addEventListener('DOMContentLoaded', function() {
      const $toggle = document.getElementById('navbar-toggle');
      const $links = document.getElementById('navbar-links');
      const $overlay = document.getElementById('navbar-overlay');

      function closeMenu() {
        $links.classList.remove('active');
        $overlay.classList.remove('active');
        $toggle.setAttribute('aria-expanded', 'false');
      }
      function openMenu() {
        $links.classList.add('active');
        $overlay.classList.add('active');
        $toggle.setAttribute('aria-expanded', 'true');
      }

      $toggle.addEventListener('click', function() {
        if ($links.classList.contains('active')) {
          closeMenu();
        } else {
          openMenu();
        }
      });
      $overlay.addEventListener('click', closeMenu);

      // Close menu on ESC key (accessibility)
      document.addEventListener('keydown', function(e) {
        if(e.key === "Escape") closeMenu();
      });

      // Optional: Close mobile nav when resizing to desktop view
      window.addEventListener('resize', function() {
        if(window.innerWidth > 700) closeMenu();
      });

      lucide.createIcons();

      // Init sidebar & main interactive logic
      renderSidebar();
      sidebarBehavior();
      videoModalBehavior();
    });
    // For page updates (if navigating with pjax, etc)
    document.addEventListener("DOMContentLoaded", () => lucide.createIcons());
  </script>
</body>
</html>